<?php

namespace Core\Bot;


use Core\Schedule\Loader as ScheduleLoader;
use Core\Schedule\Schedule;
use Core\Users\User;
use Core\Vk\Api as VkApi;
use Exception;

class MessageHandler
{
	/**
	 * –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	 *
	 * @var User
	 */
	protected $user;

	/**
	 * –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
	 *
	 * @var array
	 */
	protected $eventObject;

	/**
	 * –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–∑—ã–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥
	 *
	 * @var array
	 */
	protected $commands = array (
		'1' => 'sendScheduleForToday',
		'–Ω–∞—Å–µ–≥–æ–¥–Ω—è' => 'sendScheduleForToday',

		'2'  => 'sendScheduleForTomorrow',
		'–Ω–∞–∑–∞–≤—Ç—Ä–∞'  => 'sendScheduleForTomorrow',

		'3'  => 'sendScheduleForWeek',
		'–Ω–∞–Ω–µ–¥–µ–ª—é'  => 'sendScheduleForWeek',
		'–Ω–∞—ç—Ç—É–Ω–µ–¥–µ–ª—é' => 'sendScheduleForWeek',

		'4' => 'sendScheduleForNextWeek',
		'–Ω–∞—Å–ª–µ–¥—É—é—â—É—é–Ω–µ–¥–µ–ª—é' => 'sendScheduleForNextWeek',

		'5' => 'changeGroup',
		'–∏–∑–º–µ–Ω–∏—Ç—å–≥—Ä—É–ø–ø—É' => 'changeGroup'
	);

	/**
	 * –ú–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–µ–¥—É–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–∂–∏–¥–∞–µ—Ç—Å—è –∫–∞–∫–æ–π-—Ç–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –≤–≤–æ–¥
	 *
	 * @var array
	 */
	protected $waiting = array (
		'group_name' => 'changeGroup'
	);

	/**
	 * –û—Ç–≤–µ—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	 *
	 * @var array
	 */
	protected $answers = array (
		'first_message' => '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –∫–æ–¥ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã.<br>–ù–∞–ø—Ä–∏–º–µ—Ä: –ö3-12–ë, –õ–¢1-11–ë',
		'available_commands' => '<br><br> ---- ---- <br><br>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:<br>1. –ù–∞ —Å–µ–≥–æ–¥–Ω—è<br>2. –ù–∞ –∑–∞–≤—Ç—Ä–∞<br>3. –ù–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é<br>4. –ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é<br>5. –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É<br>–ú–æ–∂–Ω–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∫–∞–∫ —Ü–∏—Ñ—Ä–∞–º–∏, —Ç–∞–∫ –∏ —Ç–µ–∫—Å—Ç–æ–º',

		'send_group_name' => '–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–¥ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã.<br>–ù–∞–ø—Ä–∏–º–µ—Ä: –ö3-12–ë, –õ–¢4-11–ë –∏ –¥—Ä.',

		'undefined_command' => '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å :)',
		'waiting_undefined_input' => '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞... –û—Ç –≤–∞—Å –æ–∂–∏–¥–∞–µ—Ç—Å—è –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–π —Å–∏—Å—Ç–µ–º–µ –≤–≤–æ–¥. –°–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É',
		'group_not_found' => '–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ—ë –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.<br>–ù–∞–ø—Ä–∏–º–µ—Ä: –ö3-12–ë, –õ–¢4-11–ë –∏ –¥—Ä.'
	);

	/**
	 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	 *
	 * @param string|array $eventObject
	 * @throws Exception
	 */
	public function handle ($eventObject)
	{
		// –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–±—ã—Ç–∏–∏
		if (is_string($eventObject))
			$eventObject = json_decode ($eventObject, true);

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
		if (!isset($eventObject['peer_id']))
			throw new Exception ('Peer id is not exists; Event object: ' . print_r($eventObject, true));
		elseif (!isset($eventObject['text']))
			throw new Exception ('The text of message didn`t pass; Event object: ' . print_r($eventObject, true));

		$this->eventObject = $eventObject;

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç - —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º
		$userId = User::findByPeerId($eventObject['peer_id']);
		if (!$userId) {
			User::register($eventObject['peer_id']);
			VkApi::sendMessage($eventObject['peer_id'], $this->answers['first_message'], array (
				'keyboard' => static::getKeyboard ()
			));
			return;
		}
		$this->user = new User($userId, $eventObject['peer_id']);
		$this->user->loadData();

		if ($this->user->data['waiting'] == '0') {
			// –ò—â–µ–º –≤–æ–∑–º–æ–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			$commandKey = static::filterCommand($eventObject['text']);
			if (array_key_exists($commandKey, $this->commands))
				$message = $this->{$this->commands[$commandKey]}();
			else
				$message = $this->answers['undefined_command'];
		} else {
			if (array_key_exists($this->user->data['waiting'], $this->waiting))
				$message = $this->{$this->waiting[$this->user->data['waiting']]}($this->user->data['waiting']);
			else
				$message = $this->answers['waiting_undefined_input'];
		}

		if ($message != $this->answers['group_not_found'] && $message != $this->answers['send_group_name'])
			$message .= $this->answers['available_commands'];

		VkApi::sendMessage($this->user->peerId, $message, array (
			'keyboard' => static::getKeyboard ()
		));
	}

	/**
	 * –ò–∑–º–µ–Ω—è–µ—Ç –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	 *
	 * @param string|null $waiting
	 * @return void|string
	 * @throws Exception
	 */
	protected function changeGroup (string $waiting = null)
	{
		// –ï—Å–ª–∏ –º—ã –∂–¥—ë–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
		if (!is_null($waiting)) {

			// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–ø–ø–∞—Ö
			$groups = ScheduleLoader::getGroups();
			$command = static::filterCommand($this->eventObject['text'], false);

			// –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–∞–π–¥–µ–Ω–∞ - –∑–∞–ø–æ–º–∏–Ω–∞–µ–º, –∏–Ω–∞—á–µ —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
			$command = mb_strtoupper($command, 'UTF-8');
			if (array_key_exists($command, $groups)) {
				$this->user->update('group_id', $groups[$command]);
				$this->user->update('group_name', mb_strtoupper($command, 'UTF-8'));
				$this->user->update('waiting', 0);
				$message = '–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ' . $command;
			} else $message = $this->answers['group_not_found'];

			return $message;
		}

		$this->user->update('waiting', 'group_name');
		$message = $this->answers['send_group_name'];
		return $message;
	}

	/**
	 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å
	 *
	 * @return string
	 * @throws Exception
	 */
	protected function sendScheduleForToday ()
	{
		if (date('n') > 8) {
			$semester  = 1;
			$startYear = date('Y');
		} else {
			$semester  = 2;
			$startYear = (int)date('Y') - 1;
		}

		$schedule = ScheduleLoader::getScheduleGroup($this->user->data['group_id'], $semester, $startYear);

		$message  = '–í—ã —É—á–∏—Ç–µ—Å—å –ø–æ ' . ((int)!(date('W')%2) + 1) . ' –Ω–µ–¥–µ–ª–µ.<br>';
		$message .= '–°–µ–º–µ—Å—Ç—Ä: ' . $semester . '<br>';
		$message .= '–ì—Ä—É–ø–ø–∞: ' . $this->user->data['group_name'] . '<br><br>';

		$message .= ' ---- ---- <br><br>';

		$message .= Schedule::getDay($schedule, date('N')) . '<br><br>';

		$message .= ' ---- ---- <br><br>';

		$message .= 'üèõ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:<br>';
		$message .= Schedule::getEventsForDay(date('Y.m.d'));

		return $message;
	}

	/**
	 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
	 *
	 * @return string
	 * @throws Exception
	 */
	protected function sendScheduleForTomorrow ()
	{
		if (date('n', time()+86400) > 8) {
			$semester  = 1;
			$startYear = date('Y', time()+86400);
		} else {
			$semester  = 2;
			$startYear = (int)date('Y', time()+86400) - 1;
		}

		$schedule = ScheduleLoader::getScheduleGroup($this->user->data['group_id'], $semester, $startYear);

		$message  = '–í—ã –±—É–¥–µ—Ç–µ —É—á–∏—Ç—å—Å—è –ø–æ ' . ((int)!(date('W', time()+86400)%2) + 1) . ' –Ω–µ–¥–µ–ª–µ.<br>';
		$message .= '–°–µ–º–µ—Å—Ç—Ä: ' . $semester . '<br>';
		$message .= '–ì—Ä—É–ø–ø–∞: ' . $this->user->data['group_name'] . '<br><br>';

		$message .= ' ---- ---- <br><br>';

		$message .= Schedule::getDay($schedule, date('N', time()+86400)) . '<br><br>';

		$message .= ' ---- ---- <br><br>';

		$message .= 'üèõ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:<br>';
		$message .= Schedule::getEventsForDay(date('Y.m.d', time()+86400));

		return $message;
	}

	/**
	 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
	 *
	 * @return string
	 * @throws Exception
	 */
	protected function sendScheduleForWeek ()
	{
		if (date('n') > 8) {
			$semester  = 1;
			$startYear = date('Y');
		} else {
			$semester  = 2;
			$startYear = (int)date('Y') - 1;
		}

		$schedule = ScheduleLoader::getScheduleGroup($this->user->data['group_id'], $semester, $startYear);

		$message  = '–í—ã —É—á–∏—Ç–µ—Å—å –ø–æ ' . ((int)!(date('W')%2) + 1) . ' –Ω–µ–¥–µ–ª–µ.<br>';
		$message .= '–°–µ–º–µ—Å—Ç—Ä: ' . $semester . '<br>';
		$message .= '–ì—Ä—É–ø–ø–∞: ' . $this->user->data['group_name'] . '<br><br>';

		$message .= ' ---- ---- <br><br>';

		for ($weekDay = 1; $weekDay <= 7; $weekDay++) {
			$message .= Schedule::getDay($schedule, $weekDay) . '<br><br>';
		}

		$message .= ' ---- ---- <br><br>';

		$message .= 'üèõ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: <br>';
		$message .= Schedule::getEventsForWeek();

		return $message;
	}

	/**
	 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
	 *
	 * @return string
	 * @throws Exception
	 */
	protected function sendScheduleForNextWeek ()
	{
		if (date('n') > 8) {
			$semester  = 1;
			$startYear = date('Y');
		} else {
			$semester  = 2;
			$startYear = (int)date('Y') - 1;
		}

		$schedule = ScheduleLoader::getScheduleGroup($this->user->data['group_id'], $semester, $startYear);

		$message  = '–í—ã –±—É–¥–µ—Ç–µ —É—á–∏—Ç—å—Å—è –ø–æ ' . ((int)!(date('W', time()+86400*7)%2) + 1) . ' –Ω–µ–¥–µ–ª–µ.<br>';
		$message .= '–°–µ–º–µ—Å—Ç—Ä: ' . $semester . '<br>';
		$message .= '–ì—Ä—É–ø–ø–∞: ' . $this->user->data['group_name'] . '<br><br>';

		$message .= ' ---- ---- <br><br>';

		for ($weekDay = 1; $weekDay <= 7; $weekDay++) {
			$message .= Schedule::getDay($schedule, $weekDay, true) . '<br><br>';
		}

		$message .= ' ---- ---- <br><br>';

		$message .= 'üèõ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: <br>';
		$message .= Schedule::getEventsForWeek(true);

		return $message;
	}

	/**
	 * –§–∏–ª—å—Ç—Ä—É–µ—Ç –∫–æ–º–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
	 *
	 * @param string $command
	 * @param bool $strToLower
	 * @return string|string[]|null
	 */
	public static function filterCommand (string $command, bool $strToLower = true)
	{
		if ($strToLower) $command = mb_strtolower($command, 'UTF-8');
		return preg_replace('/\s+/', '', $command);
	}

	/**
	 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–æ—Ç–∞ –≤ –≤–∏–¥–µ JSON —Å—Ç—Ä–æ–∫–∏
	 *
	 * @return false|string
	 */
	protected static function getKeyboard ()
	{
		return json_encode(
			array (
				'one_time' => true,
				'buttons' => array (
					array (
						array (
							'action' => array (
								'type' => 'text',
								'label' => '–ù–∞ —Å–µ–≥–æ–¥–Ω—è',
								'payload' => '1'
							),
							'color' => 'primary'
						),
						array (
							'action' => array (
								'type' => 'text',
								'label' => '–ù–∞ –∑–∞–≤—Ç—Ä–∞',
								'payload' => '2'
							),
							'color' => 'primary'
						)
					),
					array (
						array (
							'action' => array (
								'type' => 'text',
								'label' => '–ù–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é',
								'payload' => '3'
							),
							'color' => 'primary'
						),
						array (
							'action' => array (
								'type' => 'text',
								'label' => '–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é',
								'payload' => '4'
							),
							'color' => 'primary'
						)
					),
					array (
						array (
							'action' => array (
								'type' => 'text',
								'label' => '–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É',
								'payload' => '5'
							),
							'color' => 'secondary'
						)
					)
				)
			),
			JSON_UNESCAPED_UNICODE
		);
	}
}